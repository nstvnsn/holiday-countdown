{"version":3,"sources":["components/dateTimeClock.js","components/holiday.js","components/beliefGroup.js","components/holidaySelectPane.js","App.js","serviceWorker.js","index.js"],"names":["DateTimeClock","props","useState","holiDate","setHoliDate","timeRemaining","setTimeRemaining","days","hours","minutes","seconds","timeUnits","setTimeUnits","useEffect","date","dateObj","holidayDates","belief","holiday","Date","getFullYear","clockTick","setInterval","newDate","tDate","setFullYear","clearInterval","timeInSec","day","hour","minute","secondsRemaining","Math","floor","className","Holiday","listItem","setListItem","holidayEntryClicked","e","eventHandlers","holidayChange","holidayID","active","key","id","onClick","holidayTitle","BeliefGroup","holidayList","setHolidayList","nameTitleList","Object","keys","map","name","kv","i","HolidaySelectPane","groupList","setGroupList","listOfKeys","inactive","target","App","setBelief","setHoliday","newBelief","newHoliday","toUpperCase","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ecaa533.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport holidayDates from \"../data/dates.json\";\n\nimport \"../css/dateTimeClock.css\";\n\nfunction DateTimeClock(props) {\n  let [holiDate, setHoliDate] = useState(0);\n  let [timeRemaining, setTimeRemaining] = useState(0);\n  let [timeUnits, setTimeUnits] = useState({\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n\n  useEffect(() => {\n    let date, dateObj;\n\n    date = holidayDates[props.belief][props.holiday].date;\n    date += \"/\" + new Date().getFullYear();\n    dateObj = new Date(date);\n    setHoliDate(dateObj);\n  }, [props.belief, props.holiday]);\n\n  useEffect(() => {\n    let clockTick = setInterval(() => {\n      let newDate, timeRemain;\n      newDate = new Date();\n      timeRemain = holiDate - newDate;\n      if (timeRemain < 0) {\n        let tDate = holiDate;\n        tDate.setFullYear(holiDate.getFullYear() + 1);\n        setHoliDate(tDate);\n      }\n      setTimeRemaining(holiDate - newDate);\n    }, 1000);\n    return () => clearInterval(clockTick);\n  }, [holiDate]);\n\n  useEffect(calcTime, [timeRemaining]);\n\n  function calcTime() {\n    let timeInSec = {\n      day: 24 * 60 * 60,\n      hour: 60 * 60,\n      minute: 60,\n    };\n\n    let secondsRemaining = timeRemaining / 1000;\n    let days, hours, minutes, seconds;\n\n    days = Math.floor(secondsRemaining / timeInSec.day);\n    secondsRemaining -= Math.floor(timeInSec.day * days);\n\n    hours = Math.floor(secondsRemaining / timeInSec.hour);\n    secondsRemaining -= Math.floor(timeInSec.hour * hours);\n\n    minutes = Math.floor(secondsRemaining / timeInSec.minute);\n    secondsRemaining -= Math.floor(timeInSec.minute * minutes);\n\n    seconds = Math.floor(secondsRemaining);\n\n    setTimeUnits({ days, hours, minutes, seconds });\n  }\n\n  return (\n    <div className=\"DateTimeClock\">\n      <div className=\"countdownTimer\">\n        <span>\n          <p>{timeUnits[\"days\"]}</p> <p>Days</p>\n        </span>\n        <span>\n          <p>{timeUnits[\"hours\"]}</p> <p>Hours</p>\n        </span>\n        <span>\n          <p>{timeUnits[\"minutes\"]}</p> <p>Minutes</p>\n        </span>\n        <span>\n          <p>{timeUnits[\"seconds\"]}</p> <p>Seconds</p>\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default DateTimeClock;\n","import React, { useEffect, useState } from \"react\";\n\nimport \"../css/holiday.css\";\n\nfunction Holiday(props) {\n  let [listItem, setListItem] = useState();\n\n  useEffect(() => {\n    if (props.active) {\n      setListItem(\n        <div\n          key={props.id}\n          className=\"holidayEntry-Active\"\n          onClick={holidayEntryClicked}\n        >\n          {props.holidayTitle}\n        </div>\n      );\n    } else {\n      setListItem(\n        <div\n          key={props.id}\n          className=\"holidayEntry\"\n          onClick={holidayEntryClicked}\n        >\n          {props.holidayTitle}\n        </div>\n      );\n    }\n    function holidayEntryClicked(e) {\n      props.eventHandlers.holidayChange(props.belief, props.holidayID);\n    }\n  }, [\n    props.active,\n    props.belief,\n    props.eventHandlers,\n    props.holidayID,\n    props.holidayTitle,\n    props.id,\n  ]);\n\n  return [listItem];\n}\n\nexport default Holiday;\n","import React, { useEffect, useState } from \"react\";\n\nimport holidayDates from \"../data/dates.json\";\nimport Holiday from \"../components/holiday.js\";\n\nimport \"../css/beliefGroup.css\";\n\nfunction BeliefGroup(props) {\n  let [holidayList, setHolidayList] = useState([]);\n\n  useEffect(() => {\n    let listOfKeys = Object.keys(holidayDates[props.belief]);\n\n    let nameTitleList = listOfKeys.map((key) => {\n      return [key, holidayDates[props.belief][key].name];\n    });\n\n    setHolidayList(\n      nameTitleList.map((kv, i) => {\n        let holidayComponent;\n        if (kv[0] === props.holiday) {\n          holidayComponent = (\n            <li key={i}>\n              <Holiday\n                id={i}\n                belief={props.belief}\n                active={true}\n                holidayID={kv[0]}\n                holidayTitle={kv[1]}\n                eventHandlers={{\n                  holidayChange: props.eventHandlers.holidayChange,\n                }}\n              />\n            </li>\n          );\n        } else {\n          holidayComponent = (\n            <li key={i}>\n              <Holiday\n                id={i}\n                belief={props.belief}\n                active={false}\n                holidayID={kv[0]}\n                holidayTitle={kv[1]}\n                eventHandlers={{\n                  holidayChange: props.eventHandlers.holidayChange,\n                }}\n              />\n            </li>\n          );\n        }\n        return holidayComponent;\n      })\n    );\n  }, [\n    props.active,\n    props.belief,\n    props.eventHandlers.holidayChange,\n    props.holiday,\n  ]);\n\n  if (props.active) {\n    return (\n      <li className=\"beliefGroup-Active\">\n        <span>{props.belief}</span>\n        <ul>{holidayList}</ul>\n      </li>\n    );\n  } else {\n    return (\n      <li className=\"beliefGroup\">\n        <span>{props.belief}</span>\n        <ul>{holidayList}</ul>\n      </li>\n    );\n  }\n}\n\nexport default BeliefGroup;\n","import React, { useEffect, useState } from \"react\";\n\nimport BeliefGroup from \"../components/beliefGroup\";\nimport holidayDates from \"../data/dates.json\";\n\nimport \"../css/holidaySelectPane.css\";\n\nfunction HolidaySelectPane(props) {\n  let [groupList, setGroupList] = useState([]);\n\n  useEffect(() => {\n    let listOfKeys = Object.keys(holidayDates);\n\n    setGroupList(\n      listOfKeys.map((key, i) => {\n        let listItem;\n        if (props.belief === key) {\n          listItem = (\n            <BeliefGroup\n              active={true}\n              holiday={props.holiday}\n              belief={key}\n              key={i}\n              eventHandlers={{\n                holidayChange: props.eventHandlers.holidayChange,\n              }}\n            />\n          );\n        } else {\n          listItem = (\n            <BeliefGroup\n              active={false}\n              holiday={props.holiday}\n              belief={key}\n              key={i}\n              eventHandlers={{\n                holidayChange: props.eventHandlers.holidayChange,\n              }}\n            />\n          );\n        }\n        return listItem;\n      })\n    );\n  }, [props.belief, props.holiday, props.eventHandlers.holidayChange]);\n\n  function beliefGroupClicked(e) {\n    let inactive, active;\n\n    inactive = e.target.className === \"beliefGroup\";\n    active = e.target.className === \"beliefGroup-Active\";\n    if (inactive) {\n      e.target.className = \"beliefGroup-Active\";\n    } else if (active) {\n      e.target.className = \"beliefGroup\";\n    }\n  }\n\n  return (\n    <ul className=\"holidaySelectPane\" onClick={beliefGroupClicked}>\n      {groupList}\n    </ul>\n  );\n}\n\nexport default HolidaySelectPane;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport DateTimeClock from \"./components/dateTimeClock.js\";\nimport HolidaySelectPane from \"./components/holidaySelectPane.js\";\n\nfunction App() {\n  // eslint-disable-next-line\n  let [belief, setBelief] = useState(\"PAGAN\");\n  // eslint-disable-next-line\n  let [holiday, setHoliday] = useState(\"samhain\");\n  useEffect(() => {}, []);\n\n  function handleHolidayChange(newBelief, newHoliday) {\n    setBelief(newBelief);\n    setHoliday(newHoliday);\n  }\n\n  return (\n    <div className=\"App\">\n      <HolidaySelectPane\n        belief={belief}\n        holiday={holiday}\n        eventHandlers={{ holidayChange: handleHolidayChange }}\n      />\n      <div className=\"main\">\n        <h1 className=\"App-Header\">Days Until:</h1>\n        <h2 className=\"App-Header\">\n          {holiday[0].toUpperCase() + holiday.slice(1)}\n        </h2>\n        <DateTimeClock belief={belief} holiday={holiday} />\n      </div>\n      <footer className=\"App-Footer\"></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}