{"version":3,"sources":["components/TimeUnit.js","components/DateTimeClock.js","components/Holiday.js","components/BeliefGroup.js","components/HolidaySelectPane.js","App.js","serviceWorker.js","index.js"],"names":["TimeUnit","props","className","time","unit","DateTimeClock","useState","days","hours","minutes","seconds","timeUnits","setTimeUnits","holiDateRef","useRef","timeRemainingRef","requestAnimationFrameRef","useEffect","current","requestAnimationFrame","animate","Date","timeInSec","secondsRemaining","Math","floor","calcTime","cancelAnimationFrame","hDate","holidayDates","belief","holiday","date","getFullYear","currDate","setFullYear","getHolidayDate","Holiday","active","onClick","e","cName","target","includes","eventHandlers","holidayChange","holidayID","style","cursor","holidayTitle","BeliefGroup","holidayList","setHolidayList","setActive","nameTitleList","Object","keys","map","key","name","kv","i","id","beliefGroupClickHandler","HolidaySelectPane","beliefGroupList","setBeliefGroupList","listOfBeliefs","App","setBelief","setHoliday","newBelief","newHoliday","toUpperCase","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f400247b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"../css/TimeUnit.css\";\n\nfunction TimeUnit(props) {\n  return (\n    <div className=\"timeUnit\">\n      <p>{props.time}</p>\n      <p>{props.unit}</p>\n    </div>\n  );\n}\n\nexport default TimeUnit;\n","import React, { useEffect, useRef, useState } from \"react\";\n\nimport holidayDates from \"../data/dates.json\";\n\nimport \"../css/DateTimeClock.css\";\nimport TimeUnit from \"../components/TimeUnit\";\n\nfunction DateTimeClock(props) {\n  let [timeUnits, setTimeUnits] = useState({\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n  const holiDateRef = useRef();\n  const timeRemainingRef = useRef();\n  const requestAnimationFrameRef = useRef();\n\n  function calcTime() {\n    let timeInSec = {\n      day: 24 * 60 * 60,\n      hour: 60 * 60,\n      minute: 60,\n    };\n\n    let secondsRemaining = timeRemainingRef.current / 1000;\n    let days, hours, minutes, seconds;\n\n    days = Math.floor(secondsRemaining / timeInSec.day);\n    secondsRemaining -= Math.floor(timeInSec.day * days);\n\n    hours = Math.floor(secondsRemaining / timeInSec.hour);\n    secondsRemaining -= Math.floor(timeInSec.hour * hours);\n\n    minutes = Math.floor(secondsRemaining / timeInSec.minute);\n    secondsRemaining -= Math.floor(timeInSec.minute * minutes);\n\n    seconds = Math.floor(secondsRemaining);\n\n    setTimeUnits({ days, hours, minutes, seconds });\n  }\n\n  useEffect(() => {\n    requestAnimationFrameRef.current = requestAnimationFrame(animate);\n\n    function animate(time) {\n      timeRemainingRef.current = holiDateRef.current - new Date();\n      calcTime();\n      requestAnimationFrame(animate);\n    }\n    return () => cancelAnimationFrame(requestAnimationFrameRef.current);\n  }, []);\n\n  useEffect(() => {\n    holiDateRef.current = getHolidayDate();\n\n    function getHolidayDate() {\n      const hDate = new Date(\n        holidayDates[props.belief][props.holiday].date +\n          \"/\" +\n          new Date().getFullYear()\n      );\n      const currDate = new Date();\n\n      if (hDate - currDate < 0) {\n        hDate.setFullYear(hDate.getFullYear() + 1);\n      }\n\n      return hDate;\n    }\n  }, [props.belief, props.holiday]);\n\n  return (\n    <div className=\"DateTimeClock\">\n      <div className=\"countdownTimer\">\n        <span>\n          <TimeUnit time={timeUnits.days} unit={\"Days\"} />\n        </span>\n        <span>\n          <TimeUnit time={timeUnits.hours} unit={\"Hours\"} />\n        </span>\n        <span>\n          <TimeUnit time={timeUnits.minutes} unit={\"Minutes\"} />\n        </span>\n        <span>\n          <TimeUnit time={timeUnits.seconds} unit={\"Seconds\"} />\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default DateTimeClock;\n","import React from \"react\";\n\nimport \"../css/Holiday.css\";\n\nfunction Holiday(props) {\n  return (\n    <div\n      className={(props.active && \"holidayEntry-Active\") || \"holidayEntry\"}\n      onClick={holidayEntryClicked}\n      style={{ cursor: \"pointer\" }}\n    >\n      {props.holidayTitle}\n    </div>\n  );\n\n  function holidayEntryClicked(e) {\n    const cName = e.target.className;\n    if ([\"holidayEntry\", \"holidayEntry-Active\"].includes(cName)) {\n      props.eventHandlers.holidayChange(props.belief, props.holidayID);\n    }\n  }\n}\n\nexport default Holiday;\n","import React, { useEffect, useState } from \"react\";\n\nimport holidayDates from \"../data/dates.json\";\nimport Holiday from \"./Holiday.js\";\n\nimport \"../css/BeliefGroup.css\";\n\nfunction BeliefGroup(props) {\n  let [holidayList, setHolidayList] = useState([]);\n  let [active, setActive] = useState(false);\n\n  useEffect(() => {\n    let listOfKeys = Object.keys(holidayDates[props.belief]);\n\n    let nameTitleList = listOfKeys.map((key) => {\n      return [key, holidayDates[props.belief][key].name];\n    });\n\n    setHolidayList(\n      nameTitleList.map((kv, i) => {\n        return (\n          <li className=\"holidayListItem\" key={i}>\n            <Holiday\n              id={i}\n              belief={props.belief}\n              active={kv[0] === props.holiday}\n              holidayID={kv[0]}\n              holidayTitle={kv[1]}\n              eventHandlers={{\n                holidayChange: props.eventHandlers.holidayChange,\n              }}\n            />\n          </li>\n        );\n      })\n    );\n  }, [props.belief, props.eventHandlers.holidayChange, props.holiday]);\n\n  const beliefGroupClickHandler = (e) => {\n    if ([\"beliefGroup-Active\", \"beliefGroup\"].includes(e.target.className)) {\n      setActive(!active);\n    }\n  };\n\n  return (\n    <li\n      className={(active && \"beliefGroup-Active\") || \"beliefGroup\"}\n      onClick={(e) => beliefGroupClickHandler(e)}\n    >\n      <span className=\"beliefGroupTitle\" style={{ cursor: \"pointer\" }}>\n        {props.belief}\n      </span>\n      <ul className=\"holidayList\" style={{ cursor: \"default\" }}>\n        {holidayList}\n      </ul>\n    </li>\n  );\n}\n\nexport default BeliefGroup;\n","import React, { useEffect, useState } from \"react\";\n\nimport BeliefGroup from \"../components/BeliefGroup\";\nimport holidayDates from \"../data/dates.json\";\n\nimport \"../css/HolidaySelectPane.css\";\n\nfunction HolidaySelectPane(props) {\n  const [beliefGroupList, setBeliefGroupList] = useState([]);\n\n  useEffect(() => {\n    let listOfBeliefs = Object.keys(holidayDates);\n\n    setBeliefGroupList(\n      listOfBeliefs.map((key, i) => {\n        return (\n          <BeliefGroup\n            holiday={props.holiday}\n            belief={key}\n            key={i}\n            eventHandlers={{\n              holidayChange: props.eventHandlers.holidayChange,\n            }}\n          />\n        );\n      })\n    );\n  }, [props.holiday, props.eventHandlers.holidayChange]);\n\n  return <ul className=\"holidaySelectPane\">{beliefGroupList}</ul>;\n}\n\nexport default HolidaySelectPane;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport DateTimeClock from \"./components/DateTimeClock.js\";\nimport HolidaySelectPane from \"./components/HolidaySelectPane.js\";\n\nfunction App() {\n  // eslint-disable-next-line\n  let [belief, setBelief] = useState(\"PAGAN\");\n  // eslint-disable-next-line\n  let [holiday, setHoliday] = useState(\"samhain\");\n\n  function handleHolidayChange(newBelief, newHoliday) {\n    setBelief(newBelief);\n    setHoliday(newHoliday);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"holidaySelectPaneWrapper\">\n        <HolidaySelectPane\n          belief={belief}\n          holiday={holiday}\n          eventHandlers={{ holidayChange: handleHolidayChange }}\n        />\n      </div>\n      <div className=\"main\">\n        <h1 className=\"App-Header\">Days Until:</h1>\n        <h2 className=\"App-Header\">\n          {holiday[0].toUpperCase() + holiday.slice(1)}\n        </h2>\n        <DateTimeClock belief={belief} holiday={holiday} />\n      </div>\n      <footer className=\"App-Footer\"></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}